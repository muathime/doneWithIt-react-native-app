{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport AppInputText from \"../components/AppInputText\";\nimport AppButton from \"../components/AppButton\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport ErrorMessages from \"../components/ErrorMessages\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = yup.object().shape({\n  email: yup.string().required().email().label(\"Email\"),\n  password: yup.string().required().min(4).label(\"Password\")\n});\n\nfunction LoginScreen() {\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: require(\"../images/logo-red.png\"),\n      style: styles.logo\n    }), _jsx(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: function onSubmit(values) {\n        return console.log(values);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            errors = _ref.errors,\n            setFieldTouched = _ref.setFieldTouched,\n            touched = _ref.touched;\n        return _jsxs(_Fragment, {\n          children: [_jsx(AppInputText, {\n            icon: \"email\",\n            onChangeText: handleChange(\"email\"),\n            onBlur: function onBlur() {\n              return setFieldTouched(\"email\");\n            },\n            placeholder: \"Email\",\n            autoCapitalize: \"none\",\n            autoCorrect: false,\n            keyboardType: \"email-address\",\n            autoComplete: \"email\"\n          }), _jsx(ErrorMessages, {\n            error: errors.email,\n            visible: touched.email\n          }), _jsx(AppInputText, {\n            autoCapitalize: \"none\",\n            autoCorrect: false,\n            autoComplete: \"off\",\n            icon: \"key\",\n            keyboardType: \"default\",\n            onChangeText: handleChange(\"password\"),\n            on: true,\n            placeholder: \"Password\",\n            secureTextEntry: true\n          }), _jsx(ErrorMessages, {\n            error: errors.password,\n            visible: touched.password\n          }), _jsx(AppButton, {\n            title: \"Login\",\n            btnColor: \"danger\",\n            onPress: handleSubmit\n          })]\n        });\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10\n  },\n  logo: {\n    alignSelf: 'center',\n    width: 80,\n    height: 80,\n    marginTop: 50,\n    marginBottom: 20\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/antony/sambashare/my_projects/doneWithIt-react-native-app/assets/screens/LoginScreen.js"],"names":["React","AppInputText","AppButton","Formik","yup","ErrorMessages","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","styles","container","require","logo","values","console","log","handleChange","handleSubmit","errors","setFieldTouched","touched","StyleSheet","create","padding","alignSelf","width","height","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {View, Image, StyleSheet, Text } from \"react-native\";\nimport AppInputText from \"../components/AppInputText\"\nimport AppButton from \"../components/AppButton\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport ErrorMessages from '../components/ErrorMessages';\n\nconst validationSchema =yup.object().shape({\nemail : yup.string().required().email().label(\"Email\"),\n// createdOn : yup.date().default(() => new Date()).label(\"Date\"),\npassword : yup.string().required().min(4).label(\"Password\")\n});\n\nfunction LoginScreen() {\n    return (\n      <View style={styles.container}>\n        <Image source={require(\"../images/logo-red.png\")} style={styles.logo} />\n        <Formik\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={(values) => console.log(values)}\n          validationSchema={validationSchema}\n        >\n          {({handleChange, handleSubmit, errors, setFieldTouched, touched}) => (\n            <>\n              <AppInputText\n                icon={\"email\"}\n                onChangeText={handleChange(\"email\")}\n                onBlur={() => setFieldTouched(\"email\")}\n                placeholder={\"Email\"}\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                keyboardType={\"email-address\"}\n                autoComplete={\"email\"}\n              />\n\n              <ErrorMessages error={errors.email} visible={touched.email} />\n\n              <AppInputText\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                autoComplete=\"off\"\n                icon={\"key\"}\n                keyboardType={\"default\"}\n                onChangeText={handleChange(\"password\")}\n                on\n                placeholder={\"Password\"}\n                secureTextEntry={true}\n              />\n\n              <ErrorMessages error={errors.password} visible={touched.password} />\n\n              <AppButton\n                title={\"Login\"}\n                btnColor={\"danger\"}\n                onPress={handleSubmit}\n              />\n            </>\n          )}\n        </Formik>\n      </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 10\n    },\n\n    logo: {\n        alignSelf: 'center',\n        width: 80,\n        height : 80,\n        marginTop : 50,\n        marginBottom : 20\n    }\n})\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}